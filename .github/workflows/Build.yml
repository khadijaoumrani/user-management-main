name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Analyze
    runs-on: self-hosted  # Utilise un runner auto-hébergé
    
    steps:
      # 1. Vérifiez le code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupère tout l'historique pour l'analyse SonarQube

      # 2. Vérifiez et initialisez le dépôt Git si nécessaire
      - name: Verify Git repository
        run: |
          if [ ! -d ".git" ]; then
            git init
            git remote add origin https://github.com/khadijaoumrani/user-management-main.git
            git fetch origin main
            git checkout main
          fi

      # 3. Configurez Java JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      # 4. Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 5. Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 6. Build et analyse SonarQube
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd user-management-main/user-management-main
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=user-management-main \
            -Dsonar.projectName="user-management-main"
