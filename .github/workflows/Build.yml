name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'  # Alternative distribution options are available.

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify pom.xml existence
        run: |
          if [ -f "user-management-main/user-management-main/pom.xml" ]; then
            echo "pom.xml found."
          else
            echo "pom.xml not found!"
            exit 1
          fi

      - name: Verify SONAR_HOST_URL and SONAR_TOKEN
        run: |
          echo "SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}"
          # Be careful, don't echo SONAR_TOKEN, as it's sensitive
          echo "Verifying SonarQube connection..."
          curl -s ${{ secrets.SONAR_HOST_URL }}/api/server/version

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: user-management-main/user-management-main  # Directory where pom.xml is located
        run: |
          mvn clean verify sonar:sonar -Dsonar.projectKey=user-management -X
          # or use the plugin-based run:
          # mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=user-management-main -Dsonar.projectName='user-management-main' -X
